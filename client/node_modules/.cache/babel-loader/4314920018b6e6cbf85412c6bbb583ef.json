{"ast":null,"code":"var _jsxFileName = \"/home/shailesh/Projects/Trees/Trees/client/src/AllNotes.js\";\nimport axios from \"axios\";\nimport GraphUI from \"./GraphUI\";\nimport React from \"react\";\n\nclass AllNotes extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allNotes: [],\n      links: {},\n      treeData: {},\n      titleMap: {}\n    };\n  }\n\n  saveLinks() {\n    axios.post(\"/api/links\", {\n      links: JSON.stringify(this.state.links)\n    }).then(res => {\n      console.log(\"saving\", res.data);\n      console.log(\"tree data\", JSON.stringify(this.state.treeData));\n    });\n  }\n\n  updateTitleMap() {\n    var titleMap = {};\n    this.state.allNotes.forEach(note => {\n      titleMap[note._id] = note.title;\n    });\n    this.setState({\n      titleMap: titleMap\n    });\n  } // driver function\n\n\n  populateTreeData() {\n    if (Object.keys(this.state.links).length == 0) return;\n    var treeData = this.recurseTreeData(this.state.links, Object.keys(this.state.links)[0]);\n    this.setState({\n      treeData: treeData\n    });\n  } // recursion\n\n\n  recurseTreeData(links, id) {\n    if (links[id].length == 0) {\n      return {\n        \"name\": this.state.titleMap[id],\n        \"id\": id,\n        \"size\": [150, 150],\n        \"children\": []\n      };\n    }\n\n    var treeData = {\n      \"name\": this.state.titleMap[id],\n      \"id\": id,\n      \"size\": [150, 150],\n      \"children\": []\n    };\n    links[id].forEach(childId => {\n      treeData.children.push(this.recurseTreeData(links, childId));\n    });\n    return treeData;\n  }\n\n  init() {\n    // there should not be a case when allNotes length is 0 and links is not 0\n    if (this.state.allNotes.length == 0) {\n      console.log(\"initializing...\");\n      axios.post(\"/api/notes\", {\n        title: \"Master\",\n        content: \"-\"\n      }).then(() => {\n        axios.get(\"/api/notes\").then(res => {\n          const notes = res.data;\n          var rootLink = res.data[0]._id;\n          this.setState({\n            allNotes: notes\n          });\n          var links = this.state.links;\n          links[rootLink] = [];\n          this.setState({\n            links: links\n          });\n        }).then(() => {\n          this.updateTitleMap();\n          this.populateTreeData();\n        });\n      });\n    } else {\n      axios.get(\"/api/links\").then(res => {\n        const links = JSON.parse(res.data[0].links);\n        this.setState({\n          links: links\n        });\n      }).then(() => {\n        this.updateTitleMap();\n        this.populateTreeData();\n      });\n    }\n  }\n\n  componentDidMount() {\n    axios.get(\"/api/notes\").then(res => {\n      console.log(\"HEYYY\");\n      const notes = res.data;\n      this.setState({\n        allNotes: notes\n      });\n      this.updateTitleMap();\n    }).then(() => {\n      this.init();\n    });\n  }\n\n  deleteLinks(id) {\n    if (this.state.links[id] === undefined) {\n      return;\n    }\n\n    if (this.state.links[id].length == 0) {\n      delete this.state.links[id];\n    } else {\n      this.state.links[id].forEach(element => {\n        this.deleteLinks(element);\n      });\n      delete this.state.links[id];\n    }\n\n    this.setState({\n      links: this.state.links\n    });\n  }\n\n  deleteNote({\n    variables\n  }) {\n    axios.delete(\"/api/notes\" + variables._id).then(() => {\n      axios.get(\"/api/notes\").then(res => {\n        const notes = res.data;\n        this.setState({\n          allNotes: notes\n        });\n\n        for (const [key, value] of Object.entries(this.state.links)) {\n          if (this.state.links[key].includes(variables._id)) {\n            const index = this.state.links[key].indexOf(variables._id);\n\n            if (index > -1) {\n              this.state.links[key].splice(index, 1);\n              break;\n            }\n          }\n        }\n      }).then(() => {\n        this.deleteLinks(variables._id);\n        this.saveLinks();\n      }).then(() => {\n        if (this.state.AllNotes === undefined) this.init();\n      }).then(() => {\n        this.updateTitleMap();\n        this.populateTreeData();\n        this.props.history.push(\"/\");\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  addChild({\n    variables\n  }) {\n    axios.get(\"/api/notes/addChild/\" + variables._id).then(res => {\n      const newChild = res.data;\n      this.setState({\n        allNotes: this.state.allNotes.concat([newChild])\n      });\n\n      this.state.links[variables._id].push(newChild._id);\n\n      this.state.links[newChild._id] = [];\n      this.setState({\n        links: this.state.links\n      });\n    }).then(() => {\n      this.updateTitleMap();\n      this.populateTreeData();\n      this.props.history.push(\"/\");\n    }).then(() => {\n      this.saveLinks();\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  addSibling({\n    variables\n  }) {\n    axios.get(\"/api/notes/addSibling/\" + variables._id).then(res => {\n      const newSibling = res.data;\n      this.setState({\n        allNotes: this.state.allNotes.concat([newSibling])\n      });\n\n      for (const [key, value] of Object.entries(this.state.links)) {\n        if (this.state.links[key].includes(variables._id)) {\n          this.state.links[key].push(newSibling._id);\n          this.state.links[newSibling._id] = [];\n          break;\n        }\n      }\n    }).then(() => {\n      this.saveLinks();\n    }).then(() => {\n      this.updateTitleMap();\n      this.populateTreeData();\n      this.props.history.push(\"/\");\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(GraphUI, {\n      parentContext: this,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default AllNotes;","map":{"version":3,"sources":["/home/shailesh/Projects/Trees/Trees/client/src/AllNotes.js"],"names":["axios","GraphUI","React","AllNotes","Component","state","allNotes","links","treeData","titleMap","saveLinks","post","JSON","stringify","then","res","console","log","data","updateTitleMap","forEach","note","_id","title","setState","populateTreeData","Object","keys","length","recurseTreeData","id","childId","children","push","init","content","get","notes","rootLink","parse","componentDidMount","deleteLinks","undefined","element","deleteNote","variables","delete","key","value","entries","includes","index","indexOf","splice","props","history","catch","err","addChild","newChild","concat","addSibling","newSibling","render"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport GraphUI from \"./GraphUI\"\nimport React from \"react\";\n\n\nclass AllNotes extends React.Component {\n  state = {\n    allNotes: [],\n    links: {},\n    treeData: {},\n    titleMap:{}\n  };\n\n  saveLinks(){\n    axios\n    .post(\"/api/links\", {links: JSON.stringify(this.state.links)})\n    .then(res => {\n    console.log(\"saving\", res.data)\n    console.log(\"tree data\", JSON.stringify(this.state.treeData))\n    })\n  }\n\n  updateTitleMap(){\n    var titleMap = {}\n    this.state.allNotes.forEach(note => {\n      titleMap[note._id] = note.title\n    })\n    this.setState({titleMap:titleMap})\n  }\n  // driver function\n  populateTreeData() {\n    if (Object.keys(this.state.links).length == 0)return\n    var treeData = this.recurseTreeData(this.state.links, Object.keys(this.state.links)[0])\n    this.setState({ \n      treeData: treeData,\n    });\n  }\n\n  // recursion\n  recurseTreeData(links, id) {\n    if (links[id].length == 0) {\n      return {\n        \"name\": this.state.titleMap[id],\n        \"id\": id,\n        \"size\": [150, 150],\n        \"children\": []\n      }\n    }\n\n    var treeData = {\n      \"name\": this.state.titleMap[id],\n      \"id\": id,\n      \"size\": [150, 150],\n      \"children\": []\n    }\n    links[id].forEach(childId => {\n      treeData.children.push(this.recurseTreeData(links, childId))\n    });\n    return treeData\n  }\n\n  init() {\n    // there should not be a case when allNotes length is 0 and links is not 0\n    if (this.state.allNotes.length == 0) {\n      console.log(\"initializing...\")\n      axios\n      .post(\"/api/notes\", {title: \"Master\", content: \"-\"})\n      .then(() => {\n        axios\n        .get(\"/api/notes\")\n        .then(res => {\n          const notes = res.data;\n          var rootLink = res.data[0]._id\n          this.setState({ \n            allNotes: notes\n          });\n          var links = this.state.links\n          links[rootLink] = []\n          this.setState({links:links})\n        })\n        .then(() => {\n          this.updateTitleMap()\n          this.populateTreeData()\n        })\n      })\n    }\n    else {\n      axios\n      .get(\"/api/links\")\n      .then(res => {\n        const links = JSON.parse(res.data[0].links)\n        this.setState({ \n          links: links,\n        });\n      })\n      .then(() => {\n        this.updateTitleMap()\n        this.populateTreeData()\n      })\n    }\n  }\n\n  componentDidMount() {\n    axios\n    .get(\"/api/notes\")\n    .then(res => {\n      console.log(\"HEYYY\")\n      const notes = res.data;\n      this.setState({ \n        allNotes: notes,\n      });\n      this.updateTitleMap()\n    })\n    .then(() => {\n      this.init()\n    })\n  }\n\n  deleteLinks(id){\n    if (this.state.links[id] === undefined) {\n      return\n    }\n    if (this.state.links[id].length == 0) {\n      delete this.state.links[id]\n    }\n    else {\n      this.state.links[id].forEach(element => {\n        this.deleteLinks(element)\n      });\n      delete this.state.links[id]\n    }\n    this.setState({links:this.state.links})\n  }\n\n  deleteNote({variables}) {\n    axios\n    .delete(\"/api/notes\" + variables._id)\n    .then(() => {\n      axios\n      .get(\"/api/notes\")\n      .then(res => {\n        const notes = res.data;\n        this.setState({ \n          allNotes: notes\n        });\n        for (const [key, value] of Object.entries(this.state.links)) {\n          if (this.state.links[key].includes(variables._id)) {\n            const index = this.state.links[key].indexOf(variables._id)\n            if (index > -1) {\n              this.state.links[key].splice(index, 1)\n              break\n            }\n          }\n        }\n      })\n      .then(() => {\n        this.deleteLinks(variables._id)\n        this.saveLinks()\n      })\n      .then(() => {\n        if(this.state.AllNotes === undefined)this.init()\n      })\n      .then(() =>{\n        this.updateTitleMap()\n        this.populateTreeData()\n        this.props.history.push(\"/\")\n      })\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  addChild({variables}) {\n    axios\n    .get(\"/api/notes/addChild/\" + variables._id)\n    .then(res => {\n      const newChild = res.data;\n      this.setState({ \n        allNotes: this.state.allNotes.concat([newChild])\n      });\n      this.state.links[variables._id].push(newChild._id)\n      this.state.links[newChild._id] = []\n      this.setState({links:this.state.links})\n    })\n    .then(() => {\n      this.updateTitleMap()\n      this.populateTreeData()\n      this.props.history.push(\"/\");\n      \n    })\n    .then(() => {\n      this.saveLinks()\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  addSibling({variables}) {\n    axios\n    .get(\"/api/notes/addSibling/\" + variables._id)\n    .then(res => {\n      const newSibling = res.data;\n      this.setState({ \n        allNotes: this.state.allNotes.concat([newSibling])\n      });\n      for (const [key, value] of Object.entries(this.state.links)) {\n        if (this.state.links[key].includes(variables._id)) {\n          this.state.links[key].push(newSibling._id)\n          this.state.links[newSibling._id] = []\n          break\n        }\n      }\n    })\n    .then(() => {\n      this.saveLinks()\n    })\n    .then(() => {\n      this.updateTitleMap()\n      this.populateTreeData()\n      this.props.history.push(\"/\");\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <GraphUI parentContext={this} />\n        </header>\n      </div>\n    );\n  };\n}\n\nexport default AllNotes;"]},"metadata":{},"sourceType":"module"}