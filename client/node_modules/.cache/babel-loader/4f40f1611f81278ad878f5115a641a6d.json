{"ast":null,"code":"var _jsxFileName = \"/home/shailesh/Projects/Trees/Trees/client/src/ReactQuilComp.js\";\nimport React from 'react';\nimport axios from \"axios\";\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport 'react-quill/dist/quill.bubble.css';\nimport './ReactQuilComp.css';\n\nclass RichTextEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateNote = () => {\n      const editedNote = {\n        title: 'title',\n        content: this.state.content\n      };\n      axios.put(\"/api/notes/\" + this.state._id, editedNote).then(res => {\n        console.log(res.data); // this.props.history.push(\"/\");\n      });\n    };\n\n    this.loadText = () => {\n      this.quillRef.setContents(JSON.parse(this.state.content));\n    };\n\n    this.quillRef = null; // Quill instance\n\n    this.reactQuillRef = null; // ReactQuill component\n\n    this.state = {\n      _id: '',\n      title: '',\n      content: '',\n      theme: 'snow'\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.quillRef = this.reactQuillRef.getEditor();\n    localStorage.getItem(\"lastname\");\n    axios.get(\"/api/notes/\" + this.props.match.params.id).then(res => {\n      this.setState({\n        _id: res.data._id,\n        // title: res.data.title,\n        content: res.data.content\n      });\n    }).then(() => {\n      this.loadText();\n    });\n  }\n\n  handleChange(content, delta, source, editor) {\n    this.state.content = JSON.stringify(editor.getContents());\n  } // handleThemeChange (newTheme) {\n  //   if (newTheme === \"core\") newTheme = null;\n  //   this.setState({ theme: newTheme })\n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ReactQuill, {\n      id: \"title\",\n      theme: \"bubble\",\n      onChange: this.handleChange,\n      modules: RichTextEditor.modules,\n      formats: RichTextEditor.formats,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ReactQuill, {\n      ref: el => {\n        this.reactQuillRef = el;\n      },\n      theme: this.state.theme,\n      onChange: this.handleChange,\n      modules: RichTextEditor.modules,\n      formats: RichTextEditor.formats,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"save\",\n      onClick: this.updateNote,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, \"Save\"));\n  }\n\n}\n/* \n * Quill modules to attach to editor\n * See https://quilljs.com/docs/modules/ for complete options\n */\n\n\nRichTextEditor.modules = {\n  toolbar: [[{\n    'header': '1'\n  }, {\n    'header': '2'\n  }, {\n    'font': []\n  }], [{\n    size: []\n  }], ['bold', 'italic', 'underline', 'strike', 'blockquote'], [{\n    'list': 'ordered'\n  }, {\n    'list': 'bullet'\n  }, {\n    'indent': '-1'\n  }, {\n    'indent': '+1'\n  }], ['link', 'image', 'video'], ['clean']],\n  clipboard: {\n    // toggle to add extra line breaks when pasting HTML:\n    matchVisual: false\n  }\n};\n/* \n * Quill editor formats\n * See https://quilljs.com/docs/formats/\n */\n\nRichTextEditor.formats = ['header', 'font', 'size', 'bold', 'italic', 'underline', 'strike', 'blockquote', 'list', 'bullet', 'indent', 'link', 'image', 'video'];\nexport default RichTextEditor;","map":{"version":3,"sources":["/home/shailesh/Projects/Trees/Trees/client/src/ReactQuilComp.js"],"names":["React","axios","ReactQuill","RichTextEditor","Component","constructor","props","updateNote","editedNote","title","content","state","put","_id","then","res","console","log","data","loadText","quillRef","setContents","JSON","parse","reactQuillRef","theme","handleChange","bind","componentDidMount","getEditor","localStorage","getItem","get","match","params","id","setState","delta","source","editor","stringify","getContents","render","modules","formats","el","toolbar","size","clipboard","matchVisual"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from \"axios\";\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport 'react-quill/dist/quill.bubble.css';\nimport './ReactQuilComp.css'\n\n\nclass RichTextEditor extends React.Component {\n  constructor(props) {\n    super(props)\n    this.quillRef = null;      // Quill instance\n    this.reactQuillRef = null; // ReactQuill component\n\n    this.state = {\n      _id: '',\n      title: '',\n      content: '',\n      theme: 'snow'\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  componentDidMount() {\n\n    this.quillRef = this.reactQuillRef.getEditor();\n    localStorage.getItem(\"lastname\");\n\n    axios\n    .get(\"/api/notes/\" + this.props.match.params.id)\n    .then(res => {\n      this.setState({\n        _id: res.data._id,\n        // title: res.data.title,\n        content: res.data.content\n      })\n    })\n    .then(() => {\n      this.loadText()\n    })\n  }\n\n  updateNote = () => {\n    const editedNote = {\n      title: 'title',\n      content: this.state.content,\n    }\n    axios\n    .put(\"/api/notes/\" + this.state._id, editedNote)\n    .then(res => {\n      console.log(res.data)\n      // this.props.history.push(\"/\");\n    })\n  }\n\n  loadText = () => {\n    this.quillRef.setContents(JSON.parse(this.state.content))\n  }\n\n  handleChange (content, delta, source, editor) {\n    this.state.content = JSON.stringify(editor.getContents())\n  }\n\n  // handleThemeChange (newTheme) {\n  //   if (newTheme === \"core\") newTheme = null;\n  //   this.setState({ theme: newTheme })\n  // }\n\n\n  render() {\n    return (\n      <div>\n        <ReactQuill\n          id=\"title\"\n          theme='bubble'\n          onChange={this.handleChange}\n          modules={RichTextEditor.modules}\n          formats={RichTextEditor.formats}\n        />\n        <ReactQuill\n          ref={(el) => { this.reactQuillRef = el }}\n          theme={this.state.theme}\n          onChange={this.handleChange}\n          modules={RichTextEditor.modules}\n          formats={RichTextEditor.formats}\n        />\n        {/* <div className=\"themeSwitcher\">\n          <label>Theme </label>\n          <select onChange={(e) => \n              this.handleThemeChange(e.target.value)}>\n            <option value=\"snow\">Snow</option>\n            <option value=\"bubble\">Bubble</option>\n            <option value=\"core\">Core</option>\n          </select>\n        </div> */}\n        <button id=\"save\" onClick={this.updateNote}>Save</button>\n       </div>\n     )\n  }\n}\n\n/* \n * Quill modules to attach to editor\n * See https://quilljs.com/docs/modules/ for complete options\n */\nRichTextEditor.modules = {\n  toolbar: [\n    [{ 'header': '1'}, {'header': '2'}, { 'font': [] }],\n    [{size: []}],\n    ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n    [{'list': 'ordered'}, {'list': 'bullet'}, \n     {'indent': '-1'}, {'indent': '+1'}],\n    ['link', 'image', 'video'],\n    ['clean']\n  ],\n  clipboard: {\n    // toggle to add extra line breaks when pasting HTML:\n    matchVisual: false,\n  }\n}\n\n/* \n * Quill editor formats\n * See https://quilljs.com/docs/formats/\n */\nRichTextEditor.formats = [\n  'header', 'font', 'size',\n  'bold', 'italic', 'underline', 'strike', 'blockquote',\n  'list', 'bullet', 'indent',\n  'link', 'image', 'video'\n]\n\nexport default RichTextEditor;"]},"metadata":{},"sourceType":"module"}